/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <bits/stdc++.h>
#define ll long long;
using namespace std;

class linked_list{
   struct Node{
     int val;
     Node*next;
   };
   Node*head;
   Node*tail;
   int length;
   
   public:   // start public methods
   
   linked_list():length(0),head(NULL),tail(NULL){  //constructor
        
   }
   // get new node
   Node* get_node(int element){   
       Node *newnode=new Node;
       newnode->val=element;
       newnode->next=NULL;
       return newnode;
   }
   // chek the linked_list is empty
   bool empty(){   
       return head==NULL;
   }
   // get the linked_list length
   int getlength(){
       return length;
   }
   // adding an element in the end of linked_list
   void push_back(int element){
       Node *newnode=get_node(element);
      if(empty()){
          head=tail=newnode;
          tail->next=NULL;
      }
      else{
          tail->next=newnode;
          tail=newnode;
      }
      length++;
   } 
   //  adding an element in the beginning of linked_list
   void push_front(int element){
       if(empty()){
           push_back(element);
       }
       else{
           Node*newnode=get_node(element);
           newnode->next=head;
           head=newnode;
           length++;
       }
   }
   // adding an element at index
   void insert(int index,int element){
       if(index==length){
           push_back(element);
       }
       else if(index==0){
           push_front(element);
       }
       else if(index<0||index>length){
           return;
       }
       else{
           Node*newnode=get_node(element);
           Node*cur=head;
           for(int i=0;i<index-1;i++){
               cur=cur->next;
           }
           newnode->next=cur->next;
           cur->next=newnode;
       }
   }
      //delete element from the back
   void pop_back(){
       if(empty()){
           return;
       }
       else if(length==1){
           Node *cur=head;
           delete cur;
           head=tail=NULL;
           length--;
       }
       else{
          Node*temp=head;
          while(temp->next!=tail){
              temp=temp->next;
          }
         delete tail;
         temp->next=NULL;
         tail=temp;
         length--;
       }
   }
   // delet from the front()
   void pop_front(){
       if(head==NULL)return;
       Node*cur=head;
       head=head->next;
       delete cur;
       length--;
   }
   // delete at index
   void delete_at(int index){
       if(index==0){
           pop_front();
       }
       else if(index==length){
           pop_back();
       }
       else{
           Node*cur=head;
           for(int i=0;i<index-1;i++){
               cur=cur->next;
           }
           Node*temp=cur->next;
           cur->next=temp->next;
           delete temp;
           length--;
       }
   }
   // reverse linked_list
   void reverse(){
       if(length<2)return;
       Node*before=NULL,*cur=head,*after,*preverse=head;
       while(cur){
           after=cur->next;
           cur->next=before;
           before=cur;
           cur=after;
       }
       head=before;
       tail=preverse;
   }
   // display the linked_list values 
   void print(){
       Node*cur=head;
       while(cur){
           cout<<cur->val<<" ";
           cur=cur->next;
       }
       cout<<endl;
   }
   // clear the linked list;
  void clear(){
      Node*cur;
      while(head!=NULL){
          cur=head;
          head=head->next;
          delete cur;
      }
      tail=NULL;
      delete head;
      delete tail;
      length=0;
  }
  // destructor;
  ~linked_list(){
      clear();
  }
   
};



int main()
{
    cout<<"linked list it is 0 based  \n";
    linked_list ls;
    ls.push_back(2);
    ls.push_back(3);
    ls.push_back(4);
    ls.push_back(5);
    ls.push_back(6);
    ls.print();
    cout<<ls.getlength();
    return 0;
}















